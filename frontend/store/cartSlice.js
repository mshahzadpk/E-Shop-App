// Import the necessary function createSlice from "@reduxjs/toolkit"
import { createSlice } from "@reduxjs/toolkit";

// Create a slice of the Redux store called "cart" with initial state having an empty cartItems array
export const cartSlice = createSlice({
  name: "cart",
  initialState: {
    cartItems: [],
  },
  // Define reducer functions that handle different actions for the "cart" slice
  reducers: {
    // Reducer function to add an item to the cart or increase its quantity if it already exists
    addToCart: (state, action) => {
      // Find the item in the cart with the same id as the payload's id
      const item = state.cartItems.find((p) => p.id === action.payload.id);
      if (item) {
        // If the item exists, increase its quantity and update the price accordingly
        item.quantity++;
        item.attributes.price = item.oneQuantityPrice * item.quantity;
      } else {
        // If the item does not exist in the cart, push a new item with quantity 1 to the cartItems array
        state.cartItems.push({ ...action.payload, quantity: 1 });
      }
    },
    // Reducer function to update the cart with new values for a specific item's property (e.g., quantity)
    updateCart: (state, action) => {
      // Map through the cartItems array and find the item with the same id as the payload's id
      state.cartItems = state.cartItems.map((p) => {
        if (p.id === action.payload.id) {
          // If the item is found, update the specified property (e.g., quantity)
          if (action.payload.key === "quantity") {
            p.attributes.price = p.oneQuantityPrice * action.payload.val;
          }
          return { ...p, [action.payload.key]: action.payload.val };
        }
        return p;
      });
    },
    // Reducer function to remove an item from the cart based on its id
    removeFromCart: (state, action) => {
      // Filter out the item with the same id as the payload's id from the cartItems array
      state.cartItems = state.cartItems.filter(
        (p) => p.id !== action.payload.id
      );
    },
  },
});

// Action creators are automatically generated for each case reducer function
// They can be used to dispatch the respective actions defined in the reducers
export const { addToCart, updateCart, removeFromCart } = cartSlice.actions;

// Export the reducer function generated by createSlice
// This reducer will handle the state updates based on the dispatched actions
export default cartSlice.reducer;
